services:
  elasticsearch:
    image: elasticsearch:8.15.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - 9200:9200
    volumes:
      - esdata:/usr/share/elasticsearch/data

  kibana:
    image: kibana:8.15.2
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - 5601:5601
  zookeeper:
    image: zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:2.12-2.5.0
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 172.17.0.1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_NETWORK:PLAINTEXT,LOCALHOST:PLAINTEXT
      KAFKA_LISTENERS: "DOCKER_NETWORK://:9092,LOCALHOST://:29092"
      KAFKA_ADVERTISED_LISTENERS: "DOCKER_NETWORK://kafka:9092,LOCALHOST://127.0.0.1:29092"
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_NETWORK
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  kafka-web:
    image: tchiotludo/akhq
    ports:
      - "8081:8080"
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
    depends_on:
      - kafka

  initial-payload-producer:
    build:
      context: .
      args:
        APP_DIR: kb-kafka-pipeline/initial_payload_producer
    command:
      - poetry
      - run
      - python
      - main.py
    depends_on:
      - kafka

  parser:
    build:
      context: .
      args:
        APP_DIR: kb-kafka-pipeline/parser
    command:
      - poetry
      - run
      - python
      - main.py
    working_dir: /usr/src/app 
    depends_on:
      - kafka
    volumes:
      - ./kb-kafka-pipeline/parser:/usr/src/app 

  classifier:
    build:
      context: .
      args:
        APP_DIR: kb-kafka-pipeline/classifier
    command:
      - poetry
      - run
      - python
      - main.py
    depends_on:
      - kafka

  db_sync:
    build:
      context: .
      args:
        APP_DIR: kb-kafka-pipeline/db_sync
    command:
      - poetry
      - run
      - python
      - main.py
    depends_on:
      - kafka

  searcher:
    build:
      context: ./search/searcher 
      dockerfile: Dockerfile 
    container_name: searcher
    tty: true
    stdin_open: true
    ports:
      - 3003:3003
    volumes:
      - ./search/searcher:/searcher
    depends_on:
      - elasticsearch 

  indexer:
    build:
      context: ./search/indexer 
      dockerfile: Dockerfile 
    container_name: indexer
    tty: true
    stdin_open: true
    volumes:
      - ./search/indexer:/indexer
    depends_on:
      - elasticsearch 

  postgres-env:
    image: postgres
    container_name: postgres_env
    environment:
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_USER: "postgres"
      POSTGRES_DB: "lawsuit_processed"
    ports:
      - "15432:5432"
    volumes:
      - ./postgres:/postgres_env

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@admin.com"
      PGADMIN_DEFAULT_PASSWORD: "admin"
    ports:
      - "16543:80"
    depends_on:
      - postgres-env

  coletasapi:
    container_name: coletasapi
    build:
      context: ./coletas-api/coletasAPI
      dockerfile: Dockerfile
    tty: true
    stdin_open: true
    ports:
      - "8000:8000"
    volumes:
      - ./coletas-api/coletasAPI:/coletasAPI
    platform: linux/x86_64
    working_dir: /coletasAPI
    command: ["poetry", "run", "uvicorn", "coletasapi.main:app", "--host", "0.0.0.0", "--port", "8000"]
    depends_on:
      - mongodb 

  mongodb:
    container_name: mongodb
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb:/coletas-api/databases/mongo

  tests:
    container_name: test_env
    build:
      context: ./coletas-api/coletasAPI
      dockerfile: tests/Dockerfile
    volumes:
      - ./coletas-api/coletasAPI/tests:/tests
    depends_on:
      - coletasapi
    entrypoint: ["/bin/sh", "-c", "sleep 10 && pytest"]
    environment:
      - WAIT_HOSTS=coletasapi:8000

  mock-api:
    build: ./mock-api
    ports:
      - "9777:9777"
    volumes:
      - ./mock-api/:/usr/src/app
      - /usr/src/app/node_modules
    command: npm start
  
  backend:
    build: ./backend-graphql
    ports:
      - "4000:4000"
  
  frontend:
    build: ./frontend-boilerplate
    ports:
      - "3010:3000"

volumes:
  esdata:
  mongodb:
